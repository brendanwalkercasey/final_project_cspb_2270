Steps Taken/Abandoned:
	Opencv 
		required several dependencies:

			Package managers:

				- Homebrew package manager (decided not to use - see https://saagarjha.com/blog/2019/04/26/thoughts-on-macos-package-managers/)
				- Macports package manager (decided not to use - see above, requires a lot of manual configurations I think?)

			General Dependencies from downloading from source:

				- pkg-config 
					- when i ran pkg-config --modversion opencv4, my terminal returned zsh: command not found: pkg-config
				- pkg-config required glib which depending on the version downloaded, could not run ./confgure, and instead required meson

			Issues downloading from pre-compiled binaries:
				- opencv pre-compiled binaries wouldn't link to my test_opencv.cpp code (test code for reading an image)
	Compilation Errors:

		#define M_PI 3.14159265358979323846 commented out because it caught its orginal definition when compiling (so this is uneccessary)
		
Steps Taken/Pursued:

	Grayscale transform: 
		(Brendan note: Do I need grayscale transform??? i.e. does this make encoding easier instead of rgba/argb channels?  Or will I need to decode back to rgba/argb?)
	LibTIFF:
		Used primarily to read/write TIFF (to/from temp buffer)and make necessary conversions with built in functions
		Settled on Libtiff library because I can convert to grayscale measurements using bit shifting with the luminance method (i.e. 0.299 * R + 0.587 * G + 0.114 * B)
	Wavelet Transform:
		Haar as a default, but would like to impliment something more complex (Haar, Daubechies, Coiflets, Symlets, etc.)
		Mexican Hat (worked)
    	Daubechies == too computationally complex (run-time etc.)?
Syntax changes:

	used #define to re-assign std::uint32_t types to "u32" (reduce space)


Issues (Ongoing):
	Output:
		test_libtiff_v03 runs successfully...but I cant seem to open output tiff.
        (answer = the encoded file is mistakenly saved as a tiff, but is actually unable to be read by conventional tiff software.  It needs to be "decoded" into a new tiff file)
	Decode:
		Do I need this to see output tiff? Do I need to input the encoded output tiff?
        (answer = yes, and you actually already did this, but didnt realize it.  It will actually be a tiff, just decoded from the encoding function)



******** To-Do *************

- keep running code to ensure it works!!!
- README->functions and short description
- re-name output files (tiffs)
- README-> (embbed images)
- organize write up (with analysis, results, future development, etc.)
	- future development using details above and "[done]" items below

***[extra]***
[done] how to save my decomposed parts of the Daubechies transform?
- create makefile for cleaner execution?
- separate into h-file and individual cpp files?

***[done]***
[done] new tiff (grayscale)
    - wanted to keep my project inputs simple (1 band) to focus on the wavlet tranform, compression, encoding and decoding process.
[done] add inverse transform to v02 (save as new version)
    - wanted to de-compress my result to see the change (and highlight the effectiveness of compression/pixel data saving)
[done] incorperate the "example_daubechies.cpp" into my v07 code (and what part is actually creating the four sub-bands of decomposition?)
    - wanted to explicity see how decomposition process was happening by splitting the process by decomposed bands and saved into tangible results
[not done] how to make a tree structure for encoding? (like my huffman hw) 
	- *** cool, but not enough time, see huffman_encode_example.cpp ***
[done] which part of my code is quantized
	- Wavelet compression involves transforming the image using the Daubechies-4 wavelet.  The "quantization" occurs during the conversion of the transformed floating-point values back to 8-bit values.
	  This is "normalization", and is an important step in your code because the wavelet transform produces floating-point values that (often) lie outside the 8-bit integer range (0-255).  As such you need to scale values to fit this range for display or storage.
	  Quantization errors are inherent in the process because we are essentially rounding (or "mapping") continuous data to discrete set of 8-bit values (0-255). Note: This is common in image compression techniques.
	  Ultimately, quantization occurs during normalization process where continuous values (i.e. floating-point) are mapped to discrete range of 0 to 255, to store the result in an 8-bit format (u8). This process occurs for both the wavelet transform and wavelet inverse.
[done] can I use a daubechies wavelet in lieu of Haar?
    (i.e. how to do this process with my current code:
    1) Read the TIFF Image: You need to read the TIFF image file into a suitable data structure (e.g., a matrix or 2D vector).
    2) Convert to Numeric Data: Convert the pixel data into a 2D array or vector of floating-point values, depending on your image data type (grayscale, color, etc.).
    3) Apply Wavelet Transform: Apply the Daubechies wavelet transform to the 2D array (matrix).
    4) Post-process and Encode: After transformation, you would typically quantize, encode, and possibly write the compressed result to a new file.
[done] experiment with bit shift amount? 
	added different amounts, and added discussion in README->Analysis
[done] use/remove sigma
	(see below)
[done] add threshold code?
	(see thresholding (with sigma) discussion in README->Analysis)
[done] experiment with threshold amount?
[done] add thresholding discussion (with explination of sigma, see below) to README->Analysis
	- e.g. "Using sigma as a threshold to remove smaller wavelet coefficients before quantization is useful for reducing noise or compressing the image more aggressively"
	- e.g. "I decided to add a thresholding operation based on sigma before applying the quantization. Values smaller than sigma will be set to zero, which could be useful if sigma represents a noise level that I can suppress"


****************************

Resources:
http://bearcave.com/software/java/wavelets/daubechies/index.html
http://bearcave.com/misl/misl_tech/wavelets/daubechies/daub.h
https://wavelet2d.sourceforge.net/ (...just a library, not really helping me build the wavelet transform)
https://pywavelets.readthedocs.io/en/latest/ref/wavelets.html
https://graphics.stanford.edu/wikis/cs148-07/Assignment7
https://people.qatar.tamu.edu/tingwen.huang/math414/5.1.pdf (Texas A&M lecture)
https://people.math.sc.edu/Burkardt/data/tif/tif.html (example tiff files)